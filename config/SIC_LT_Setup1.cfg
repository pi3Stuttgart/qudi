#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    #startup: ['man', 'tray', 'tasklogic', 'setupcontrol', 'counter']
    startup: ['man', 'tray', 'tasklogic', 'setupcontrol', 'counter', 'confocal', 'PLE', 'biaslogic', 'ArbSeq', 'automatedmeasurement']#, 'gatedcounter']#'automatedmeasurement', 'spectrometer']#, 'queuegui', 'ODMR']
    #startup: ['man', 'tray', 'tasklogic', 'queuegui','odmr_refocus']
    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:
    mcas_dict_awg:
        module.Class: 'Keysight_AWG_M8190.pym8190a.mcas_dict_holder'
        name: 'awg_holder'

    mycounter:
        module.Class: 'timetagger_counter.TimeTaggerCounter'
        timetagger_channel_apd_0: 0
        timetagger_channel_apd_1: 0
        timetagger_sum_channels: False
        timetagger_count_frequency: 13
        trigger_level_0: 0.11
        trigger_level_0: 0.11
        trigger_level_0: 0.11

    pulsestreamer:
        module.Class: 'swabian_instruments.pulse_streamer.PulseStreamer'
        pulsestreamer_ip: '169.254.8.2'
        # pulsed_file_dir: 'C:\\Software\\pulsed_files'
        # laser_channel: 0
        # uw_x_channel: 3
        # use_external_clock: False
        # external_clock_option: 0
    
    mw_source_smiq:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        #options:
        visa_address: 'GPIB0::28::INSTR'
            # comm_timeout: 10000  # in milliseconds

    nicard_6323:
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        photon_sources:
            - '/Dev1/PFI0'
        #clock_channel: '/Dev1/Ctr1'
        clock_channel: '/Dev1/Ctr0'
        default_clock_frequency: 61 # optional, in Hz
        counter_channels:
            - '/Dev1/Ctr1'
            #- '/Dev1/Ctr0'
        counter_ai_channels:
            - '/Dev1/AI0'
        counter_voltage_range: [-10, 10]
        default_scanner_clock_frequency: 61 # optional, in Hz
        scanner_clock_channel: '/Dev1/Ctr2'
        pixel_clock_channel: '/Dev1/PFI6'
        scanner_ao_channels:
            - '/Dev1/ao0'
            - '/Dev1/ao1'
            - '/Dev1/ao2'  # unsued because no z scanner
            - '/Dev1/AO3'
        # scanner_ai_channels:
        #     - '/Dev1/AI1'
        scanner_counter_channels:
            - '/Dev1/Ctr3'
        scanner_voltage_ranges:
            - [0, 10]
            - [0, 10]
            - [0, 10] # unsued because no z scanner
            - [-3, 3]
        scanner_position_ranges:
            - [-25e-6, 25e-6]
            - [-25e-6, 25e-6]
            - [0, 15e-6] # unsued because no z scanner
            - [-3.85, 3.85]
        rotation_correction: "0" # how to put numpy expression np.pi/4
        scaling_correction_a: "1"
        scaling_correction_b: "1" # 0.7071067 #1/np.sqrt(2)

        odmr_trigger_channel: '/Dev1/PFI7'

        gate_in_channel: '/Dev1/PFI9'
        default_samples_number: 50
        max_counts: 3e7
        read_write_timeout: 10
        counting_edge_rising: True

    streamusbnidaqdummy:
        module.Class: 'USBNidaq6211dummy.streamUSBnidaq'
        chan_in: 'dev3/ai13'
        chan_A1: 'dev3/ao1'
        chan_A2: 'None'#dev3/ao1'
        voltagerange: [0, 10]
    
    USBNIDAQ6001:
        module.Class: 'USBNidaq6211.streamUSBnidaq'
        chan_in: 'Dev2/ai0'
        chan_A1: 'Dev2/ao0'
        chan_A2: 'None'#dev3/ao1'
        voltagerange: [-10,10]

    TopticaCTL:
        module.Class: 'laser.Toptica.toptica_CTL_laser.TopticaCTL'
        IP: '129.69.46.175'

    HubnerCobolt:
        module.Class: 'laser.cobolt_laser.HubnerCobolt'
        COM_Port: 'COM4'

    HubnerCWave:
        module.Class: 'laser.Hubner.cwave_laser.HubnerCWave'
        IP: '129.69.46.217'
    
    timetagger:
    # this is the module which ODMR uses.
        module.Class: 'swabian_instruments.timetagger.TT'
        hist:
            click_channel: 0
            start_channel: 4
            #next_channel: 12 #negative slope of channel 4
            #sync_channel: 7
            binwidth: 200
            number_of_bins: 100
            #n_histograms: 1
        count_between_markers:
            click_channel: 0
            begin_channel: 4
            end_channel: 7
            n_values: 7
        # count_between_markers: #new TT firmware
        #     click_channel: 2
        #     begin_channel: 5
        #     end_channel: 8
        #     n_values: 7


        # time_diff: #new TT firmware
        #     click_channel: 1
        #     start_channel: 5
        #     next_channel: 13 #negative slope of channel 4
        #     sync_channel: 8
        #     binwidth: 1000
        #     n_bins: 30
        #     n_histograms: 1
        time_diff:
            click_channel: 0
            start_channel: 4
            next_channel: 12 #negative slope of channel 4
            sync_channel: 7
            binwidth: 1000
            n_bins: 30
            n_histograms: 1

        corr:
            channel_start: 0
            channel_stop: 1
            binwidth: 1000
            number_of_bins: 1000
            ctrate:
            channels: [0,1]

        counter:
            channels: [0,1]
            bins_width: 1000000000 #1ms
            n_values: 40

        combiner:
            channels: [2,3]

        test_channels: [] #[1,2,3,4,5,6,7]#[1,2, 4, -4]

        channels_params:
            zero:
                delay: 0
                trigger_level: .11
            one:
                delay: 0
                trigger_level: .11
            two:
                delay: 0
                trigger_level: .11
            six:
                delay: 0
                trigger_level: 1
    
    fastcounter_timetagger: ###08/03/2024 added from RT SiC Scudi for pulsed_measurement_logic
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        timetagger_channel_apd_0: 0 #1
        timetagger_channel_apd_1: 0 #2
        timetagger_channel_detect: 4 #5
        timetagger_channel_sequence: 4 #5
        timetagger_sum_channels: 7
        connect:
            timetagger: 'timetagger'
    
    # tagger: ###08/03/2024 from RT SiC Scudi for fastcounter - required?
    #     module.Class: 'swabian_instruments.timetagger_api.TT'
    #     options:
    #         #serial: "1740000JFB"
    #         hist:
    #             channels: [1,2]
    #             trigger_channel: 5

    #         corr:
    #             channel_start: 1
    #             channel_stop: 2
            
    #         counter:
    #             channels: [1,2]

    #         combiner:
    #             channels: [1, 2]
            
    #         channels_params:
    #             1: 
    #                 delay: 0 #3.25e6
    #                 trigger_level: 0.09
    #             2: 
    #                 delay: 0 #3.25e6
    #                 trigger_level: 1
    #             4: 
    #                 delay: 0e9 #3.25e6
    #                 trigger_level: 1

    ni_usb6211:
        module.Class: 'ni_usb6211.NI_USB6211'

    oceanviewspectrometer:
        module.Class: 'spectrometer.oceanoptics_spectrometer.OceanOptics'
        spectrometer_serial: 'QEP02179' #insert here the right serial number.
        # integration_time: 2 # second(s)
    

    dummyoceanviewspectrometer:
        module.Class: 'spectrometer.spectrometer_dummy.SpectrometerInterfaceDummy'
        spectrometer_serial: 'QEP02179' #insert here the right serial number.
        connect:
            fitlogic: 'fitlogic'

    highfiness_wavemeter:
        module.Class: 'high_finesse_wavemeter.HighFinesseWavemeter'
        default_channel: 1
        dll_path: 'C:\Windows\System32\wlmData.dll'
        measurement_timing: 10.0 # in seconds    

logic:

    nuclearopslogic:
        module.Class: 'NuclearOPs.NuclearOPs'
        #connect:
            #confocal: 'scannerlogic'
            #mcas_dict: 'mcas_dict_awg'
            #transition_tracker : 'transitiontrackerlogic'
    
    odmrlogic:
        module.Class: 'odmrlogic.odmr_logic.ODMRLogic_holder'
        connect:
            counter_device: 'timetagger'
            savelogic: 'savelogic'
            mcas_holder: 'mcas_dict_awg'
            #fitlogic: 'fitlogic'
            fitlogic: 'own_fitlogic'
            
    
    rabilogic:
        module.Class: 'rabi_logic.rabi_logic.RabiLogic'
        connect:
            counter_device: 'timetagger'
            savelogic: 'savelogic'
            mcas_holder: 'mcas_dict_awg'
            fitlogic: 'fitlogic'
            #transition_tracker : 'transitiontrackerlogic'
    arbseqlogic:
        module.Class: 'arb_seq_logic.arb_seq_logic.ArbSeqLogic'
        connect:
            counter_device: 'timetagger'
            savelogic: 'savelogic'
            mcas_holder: 'mcas_dict_awg'
            fitlogic: 'fitlogic'
            #transition_tracker : 'transitiontrackerlogic'

    # pulsed_master_logic:
    #     module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
    #     connect:
    #         pulsedmeasurementlogic: 'pulsed_measurement_logic'
    #         sequencegeneratorlogic: 'sequence_generator_logic'

    # sequence_generator_logic:
    #     module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
    #     #overhead_bytes: 0
    #     #additional_predefined_methods_path: null
    #     #additional_sampling_functions_path: null
    #     #assets_storage_path:
    #     connect:
    #         pulsegenerator: "pulsestreamer"

    # pulsed_measurement_logic:
    #     module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
    #     options:
    #         raw_data_save_type: 'text'
    #         #additional_extraction_path:
    #         #additional_analysis_path:
    #     connect:
    #         fastcounter: "fastcounter_timetagger"
    #         microwave: 'mw_source_smiq'
    #         pulsegenerator: "pulsestreamer"
        
    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mycounter'
            savelogic: 'savelogic'
    
    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            savelogic: 'savelogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'nicard_6323'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'E:/data_newPC/'
        #win_data_directory: 'C:/Data'
        unix_data_directory: 'Data/'
        log_into_daily_directory: True
        save_pdf: False
        save_png: True

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    own_fitlogic:
        module.Class: 'own_fitlogic.FitLogic'

    laserscannerlogic:
        module.Class: 'laserscanner.laser_scanner_logic.LaserScannerLogic'
        connect:
            confocalscanner1: 'nicard_6323'
            savelogic: 'savelogic'
            #setupcontrollogic: 'setupcontrollogic'
            mcas_holder: 'mcas_dict_awg'
            fitlogic: 'fitlogic'
            wavemeterlogic: 'wavemeterloggerlogic'

    
    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True
    
    setupcontrollogic:
        module.Class: 'setup_control_logic.SetupControlLogic'
        connect:
            mcas_holder: 'mcas_dict_awg'
            #powercontrol: 'laserpowerlogic'
            savelogic: 'savelogic'

    # laserpowerlogic:
    #     module.Class: 'laser_power_photodiode.LaserPowerHolder'
    #     connect:
    #         ao_module: 'ni_usb6211'

    transitiontrackerlogic:
        module.Class: 'transition_tracker.TransitionTracker'
        connect:
            mcas_holder: 'mcas_dict_awg'
            #rabi_logic: 'rabilogic'
            odmr_logic: 'odmrlogic'
            ple_logic: 'laserscannerlogic'
            powerstabilization_logic: 'powerstabilizationlogic'
        c13_list: []
        si29_list: []


    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            optimiserlogic: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
            savelogic: 'savelogic'

    automationlogic:
        module.Class: 'automation_pi3.AutomatedMeasurementLogic'
        connect:
            savelogic: 'savelogic'
            optimizerlogic: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
            spectrumlogic: 'spectrumlogic'
            setupcontrollogic : 'setupcontrollogic'
            arbseqlogic : 'arbseqlogic'
            ctllogic : 'ctllogic'
            #mcas_holder: 'mcas_dict_awg'
            counterlogic: 'counterlogic'
            laserscannerlogic: 'laserscannerlogic'
            powerstabilizationlogic: 'powerstabilizationlogic'
            poimanagerlogic: 'poimanagerlogic'
            biaslogic: 'biaslogic'

    spectrumlogic:
        module.Class: 'spectrum.SpectrumLogic'
        connect:
            #spectrometer: 'oceanviewspectrometer'
            spectrometer: 'dummyoceanviewspectrometer'
            #pulser: 'pulser'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'


    gatedcounterlogic:
        module.Class: 'gated_counter_logic.GatedCounter'
        connect:
            mcas_holder: 'mcas_dict_awg'
            fastcounter: 'timetagger'

    queuelogic: #free declaration
        module.Class: 'queue.queue_logic.queue_logic' #a class path.
        connect:
            gated_counter: 'gatedcounterlogic' # key as in declaration , value as in the config key
            mcas_holder: 'mcas_dict_awg'
            confocal: 'scannerlogic'
            transition_tracker : 'transitiontrackerlogic' #Label(name)  Should be same as in declaration of the class
            optimizer: 'optimizerlogic'
            PLE_logic: 'laserscannerlogic'
            odmr_logic: 'odmrlogic'
            powerstabilization_logic: 'powerstabilizationlogic'
            poimanagerlogic: 'poimanagerlogic'
            counterlogic1: 'counterlogic'
            fastcounter: 'timetagger'



    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'gatedcounterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    timetaggerlogic:
        module.Class: 'timetagger_erik.timetaggerlogic.TimeTaggerLogic'
        connect:
            savelogic: 'savelogic'
            counter_device: 'timetagger'

    powerstabilizationlogic:
        module.Class: 'powerstabilization.powerstabilizationlogic.PowerStabilizationLogic'
        connect:
            streamUSBnidaq: 'USBNIDAQ6001'
            setupcontrollogic1: 'setupcontrollogic'
            savelogic: 'savelogic'
        voltage_offset: 0.01651
        voltage_to_power_ratio: 6.7485e-3
    
    biaslogic:
        module.Class: 'biaslogic.BiasLogic'
        connect:
            USBnidaq: 'USBNIDAQ6001'
            laserscannerlogic: 'laserscannerlogic'

    ctllogic:
        module.Class: 'CTLLogic.CTLLogic'
        connect:
            TopticaCTL: 'TopticaCTL'

    cobolt_logic:
        module.Class: 'cobolt_logic.CoboltLogic'
        connect:
            HubnerCobolt: 'HubnerCobolt'
         

    wavemeterloggerlogic:
        module.Class: 'wavemeter_logger_logic.WavemeterLoggerLogic'
        connect:
            wavemeter1: 'highfiness_wavemeter'
            counterlogic: 'counterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'
            
gui:

    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    odmr_refocus:
        module.Class: 'qdplotter.qdplotter_gui.QDPlotterGui'
        connect:
            queue_logic: 'queuelogic'

    ODMR:
        module.Class: 'odmr.odmrgui.ODMRGUI'
        connect:
            odmrlogic: 'odmrlogic'
        #    savelogic: 'savelogic'
    queuegui:
        module.Class: 'queue.Queue.queue_gui'
        connect:
            queue_logic: 'queuelogic'

    setupcontrol:
        module.Class: 'setupcontrol.setupcontrolgui.SetupControlGUI'
        connect:
            setupcontrollogic: 'setupcontrollogic'

    counter:   
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
            # automizedmeasurementlogic: 'automationlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        default_meter_prefix: 'u'

    PLE:
        module.Class: 'laserscanner.laserscannergui.VoltScanGui'
        connect:
            voltagescannerlogic1: 'laserscannerlogic'

    
    TransitionTracker:
        module.Class: 'transition_tracker.transition_tracker_gui.TransitionTrackerGui'
        connect:
            transition_tracker_logic: 'transitiontrackerlogic'


    Rabi:
        module.Class: 'rabi.rabigui.RabiGUI'
        connect:
            rabilogic: 'rabilogic'

    ArbSeq:
        module.Class: 'arb_seq.arbseqgui.ArbSeqGUI'
        connect:
            arbseqlogic: 'arbseqlogic'
    
    # pulsed_gui:
    #     module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
    #     connect:
    #         pulsedmasterlogic: 'pulsed_master_logic'
            
    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic: 'poimanagerlogic'
            scannerlogic: 'scannerlogic'
    
    spectrometer:
        module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
        connect:
            spectrumlogic: 'spectrumlogic'
            
    automatedmeasurement:
        module.Class: 'automizedmeasurement.automizedmeasurementgui.AutomizedMeasurementGUI'
        connect:
            automatedmeasurementlogic: 'automationlogic'
    

    gatedcounter:
        module.Class: 'gated_counter.gated_counter_gui.GatedCounterGui'
        connect:
            gatedcounterlogic1: 'gatedcounterlogic'

    powerstabilizationgui:
        module.Class: 'powerstabilization.powerstabilizationgui.PowerStabilizationGui'
        connect:
            powerstabilizationlogic: 'powerstabilizationlogic'

    wavemeterlogger:
        module.Class: 'wavemeterlogger.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic1: 'wavemeterloggerlogic'
            savelogic: 'savelogic'